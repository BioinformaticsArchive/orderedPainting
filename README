
This code is written by Koji Yahara, and
implements the algorithm described in the following paper:

  Efficient inference of recombination hot regions in bacterial genomes
  Koji Yahara, Xavier Didelot, Azim Ansari, Samuel Sheppard and Daniel Falush
  in preparation

orderedPainting is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by
the Free Software Foundation.

orderedPainting is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.


#---------------------------------------------------------
# 1. Setting of your grid engine
#---------------------------------------------------------

orderedPainting is implemented based on a grid engine
(UGE/SGE or LSF) which can execute array jobs.

The default setting is UGE/SGE.  If you would like to use 
LSF instead, please edit "lib/env_func.bashrc" as below

  #QUEUE_TYPE="SGE"                        # comment out
  #QSUB_COMMON="qsub -cwd "                # comment out
  #MAX_MEMORY="-l s_vmem=8G -l mem_req=8"  # comment out
  
  QUEUE_TYPE="LSF"          # comment in instead
  QSUB_COMMON="bsub "       # comment in instead
  MAX_MEMORY="-M 8000000"   # comment in instead



#---------------------------------------------------------
# 2. Disk and memory usage
#---------------------------------------------------------

As an example, 200 genomes with 100,000 SNPs require

  about 400GB temporary disk space 
  (for 10 orderings and their reverse) 

  6GB RAM

The disk space is required to store raw uncompressed data 
of ChromoPainter (although these data are compressed 
during post-processing).

The RAM is required to combine results of the orderings.

The upper limit of memory usage for your grid engine can 
be speficied by "MAX_MEMORY" in "lib/env_func.bashrc" above.



#---------------------------------------------------------
# 3. Setup
#---------------------------------------------------------

Please execute "setup.sh" as follows.
It will set programs used in orderedPainting.sh
(e.g., download and compile ChromoPainter and GNU sort).

  $ /bin/bash setup.sh

Compilation of one of the programs (GNU sort) requires a few minutes.
Please wait during that time.



#---------------------------------------------------------
# 4. Basic usage
#---------------------------------------------------------

The following is the most basic example which uses files in the "example1" directory.

  $ qsub -cwd -o example1.log -e example1.log <<< "/bin/bash ./orderedPainting.sh  -g example1/simulatedData_N100.hap  -l example1/strainName_N100.txt"
  
  (If you use LSF, please use "bsub" instead of "qsub -cwd")

The format of the ".hap" file is the same as ChromoPainter.

The ".list" is a 1-column file which indicates name of each strain in the ".hap" file.



#---------------------------------------------------------
# 5. Output
#---------------------------------------------------------

Please check the log file you specified above.

  $ tail example1.log

If the program finished running normally, the following message 
will be written in the log file

  Done. Please look at output files in simulatedData_N100_orderedS1_rnd_1_10_dirs_results

Please look at the output files there. 

  $ ls simulatedData_N100_orderedS1_rnd_1_10_dirs_results/

The following files and directories will be seen.

  |
  |-- results_siteStats.txt.gz
  |-- results_siteStats_hist.png
  |-- results_siteStats_summary.pos.txt
  |-- results_siteStats_along_seq.png
  |
  |-- (results_siteStats_missingCnt.png)
  |
  |-- sum_site_minus_average.summary.range.txt
  |-- sum_site_minus_average.summary.txt.gz
  |
  |-- visualize_bottom/
  |-- visualize_bottom.list
  |-- visualize_middle/
  |-- visualize_middle.list
  |-- visualize_top/
  |-- visualize_top.list

     ("results_siteStats_missingCnt.png"
       will be produced only if imputed data are analyzed)


"results_siteStats.txt.gz" contains values of the distance statistic and bootstrap support of each site.

"results_siteStats_hist.png" shows histgram of the distance statistic.

"results_siteStats_summary.pos.txt" contains information of representative sites picked up from
the top/middle/bottom of the distribution.

"results_siteStats_along_seq.png" shows distribution of the distance statistic along the genome.
Two recombiantion hot regions should be seen.



Other log files are produced temporarily in a current directory, and then moved 
to the "log" directory.  If the output files are successfully obtained, 
there is no need to check these additional log files.



#---------------------------------------------------------
# 6. Usage for imputed data
#---------------------------------------------------------

If you would like to use imputed data, please prepare a file which indicates

  position[tab]name of missing strain at the position

For example,

  64	strain1
  64	strain5
  100	strain1

indicates strain1 and strain5 are missing at position 64, and 
strain 1 is missing at position 100.

Please specify the file by "-m" option in orderedPainting.sh

The file is used to calculate site-by-site and average copying probability matrices 
by masking columns and rows of missing individuals at a site.



#---------------------------------------------------------
# 7. Re-execution
#---------------------------------------------------------

If orderedPainting stoped during its computation, for example
by an occasional problem of your grid engine (such as incomplete
execution of array jobs), please re-execute the command 
as previously after fixing the problem.

It should restart computation at an appropriate step
and proceed to the end.



#---------------------------------------------------------
# 8. Further information
#---------------------------------------------------------

If you find any problem, please inform to koji.yahara@gmail.com

